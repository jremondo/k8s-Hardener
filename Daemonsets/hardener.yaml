apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8s-hardener
  labels:
    purpose: execute-command
spec:
  selector:
    matchLabels:
      app: k8s-hardener
  template:
    metadata:
      labels:
        app: k8s-hardener
    spec:
      volumes:
      - name: kube-services-path
        hostPath:
          path: /etc/systemd/system/
      - name: kube-proxy-config-path
        hostPath:
          path: /var/lib/kube-proxy/
      - name: kubernetes-home-path
        hostPath:
          path: /home/kubernetes/
      containers:
      - name: file-permission
        image: debian
        command: ["sh", "-c"]
        args:
        - |-
          # CIS Controls. Worker Node Profile Applicability: Level 1


            # Ownership and access level in config files 

              # Change file permissions to 644, Uid:root and Gid:root in kube service files
                for i in $(ls -- $KUBE_SERVICES_PATH/kube*.service | wc -l)
                do
                  stat --printf='%a\t%n\n' $KUBE_SERVICES_PATH/kube*.service | \
                    awk '{if ($1 != 644) print $2}' | \
                    xargs -I {} chmod 644 $2 {}
                  stat --printf='%U\t%G\t%n\n' $KUBE_SERVICES_PATH/kube*.service | \
                    awk '{if (($1 != "root") || ($2 != "root")) print $3}' | \
                    xargs -I {} chown root:root $3 {}
                done

              # Change file permissions to 644, Uid:root and Gid:root in kube-proxy config file

                stat --printf='%a\t%n\n' $KUBE_PROXY_CONFIG_PATH/kubeconfig | \
                  awk '{if ($1 != 644) print $2}' | \
                  xargs -I {} chmod 644 $2 {}
                stat --printf='%U\t%G\t%n\n' $KUBE_PROXY_CONFIG_PATH/kubeconfig | \
                  awk '{if (($1 != "root") || ($2 != "root")) print $3}' | \
                  xargs -I {} chown root:root $3 {}

              # Change file permissions to 600, Uid:root and Gid:root in kubelet config file

                stat --printf='%a\t%n\n' $KUBERNETES_HOME_PATH/kubelet-config.yaml | \
                  awk '{if ($1 != 600) print $2}' | \
                  xargs -I {} chmod 600 $2 {}
                stat --printf='%U\t%G\t%n\n' $KUBERNETES_HOME_PATH/kubelet-config.yaml | \
                  awk '{if (($1 != "root") || ($2 != "root")) print $3}' | \
                  xargs -I {} chown root:root $3 {}

            # Settings in kubelet-config.yaml file (level 1)

              # autentication: anonymous: to false
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==4 {if ($2 == "true") print $2}' | \
                xargs -I -exec sed -i.bak '4 s/enabled: true/enabled: false/' '$KUBERNETES_HOME_PATH/kubelet-config.yaml'
              
              # authentication: x509: clientCAFile: to correct path
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==8 {if ($2 != "/etc/srv/kubernetes/pki/ca-certificates.crt") print $2}' | \
                xargs -I -exec sed -i.bak '8 s/clientCAFile.*/clientCAFile: \/etc\/srv\/kubernetes\/pki\/ca-certificates.crt/' '$KUBERNETES_HOME_PATH/kubelet-config.yaml'

              # tlsCertFile: set to correct location
              var=$(grep tlsCertFile /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak 's/clientCAFile.*/&\n    tlsCertFile: \/var\/lib\/kubelet\/pki\/kubelet-client.crt/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                elif [ "$var" != "tlsCertFile: /var/lib/kubelet/pki/kubelet-client.crt" ]; then
                  sed -i.bak 's/tlsCertFile.*/tlsCertFile: \/var\/lib\/kubelet\/pki\/kubelet-client.crt/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                fi
              unset var

              # tlsPrivateKeyFile: set to correct location
              var=$(grep tlsPrivateKeyFile /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak 's/tlsCertFile.*/&\n    tlsPrivateKeyFile: \/var\/lib\/kubelet\/pki\/kubelet-client.key/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                elif [ "$var" != "tlsPrivateKeyFile: /var/lib/kubelet/pki/kubelet-client.crt" ]; then
                  sed -i.bak 's/tlsPrivateKeyFile.*/tlsPrivateKeyFile: \/var\/lib\/kubelet\/pki\/kubelet-client.key/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                fi
              unset var

              # authorization: mode: to Webhook
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==12 {if ($2 != "Webhook") print $2}' | \
                xargs -I -exec sed -i.bak '12 s/mode.*/mode: Webhook/' '$KUBERNETES_HOME_PATH/kubelet-config.yaml'
              
              
              # readOnlyPort: to 0
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==32 {if ($2 != 0) print $2}' | \
                xargs -I -exec sed -i.bak '32 s/readOnlyPort.*/readOnlyPort: 0/' '/home/kubernetes/kubelet-config.yaml'
              
              # streamingConnectionIdleTimeout: to a value other than 0
              var=$(grep streamingConnectionIdleTimeout /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak '$a streamingConnectionIdleTimeout: 5m' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                elif [ "$var" != "streamingConnectionIdleTimeout: 5m" ]; then
                  sed -i.bak 's/streamingConnectionIdleTimeout.*/streamingConnectionIdleTimeout: 5m/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                fi
              unset var

              # protectKernelDefaults: to true
              var=$(grep protectKernelDefaults /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak '$a protectKernelDefaults: true' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                elif [ "$var" != "protectKernelDefaults: true" ]; then
                  sed -i.bak 's/protectKernelDefaults.*/protectKernelDefaults: true/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                fi
              unset var

              # makeIPTablesUtilChains: to true
              var=$(grep makeIPTablesUtilChains /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak '$a makeIPTablesUtilChains: true' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                elif [ "$var" != "makeIPTablesUtilChains: true" ]; then
                  sed -i.bak 's/makeIPTablesUtilChains.*/makeIPTablesUtilChains: true/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                fi
              unset var

              # hostnameOverride argument is not set 
              var=$(grep hostname /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              var1=$(grep hostname /etc/systemd/system/kubelet.service | awk '{print $0}')
                if [ $(echo "$var" | wc -L) -ne 0 ] || [ $(echo "$var1" | wc -L) -ne 0 ]; then
                  sed -i.bak '/hostname.*/d' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                  sed -i.bak '/Hostname.*/d' $KUBE_SERVICES_PATH/kubelet.service;
                fi
              unset var
              unset var1

              # rotateCertificates: to true
              var=$(grep rotateCertificates /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak '$a rotateCertificates: true' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                elif [ "$var" != "rotateCertificates: true" ]; then
                  sed -i.bak 's/rotateCertificates.*/rotateCertificates: true/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                fi
              unset var

          
          # CIS Controls. Worker Node Profile Applicability: Level 2


            # Settings in kubelet-config.yaml file (level 2)

              # eventRecordQPS: to 5
              var=$(grep eventRecordQPS /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak '$a eventRecordQPS: 5' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                elif [ "$var" != "eventRecordQPS: 5" ]; then
                  sed -i.bak 's/eventRecordQPS.*/eventRecordQPS: 5/' $KUBERNETES_HOME_PATH/kubelet-config.yaml;
                fi
              unset var

        env:
          - name: KUBE_SERVICES_PATH
            value: "/etc/systemd/system"
          - name: KUBE_PROXY_CONFIG_PATH
            value: "/var/lib/kube-proxy"
          - name: KUBERNETES_HOME_PATH
            value: "/home/kubernetes"
        volumeMounts:
        - name: kube-services-path
          mountPath: /etc/systemd/system/
        - name: kube-proxy-config-path
          mountPath: /var/lib/kube-proxy/
        - name: kubernetes-home-path
          mountPath: /home/kubernetes/