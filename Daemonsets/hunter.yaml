apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hunter
  labels:
    purpose: execute-command
spec:
  selector:
    matchLabels:
      app: hunter
  template:
    metadata:
      labels:
        app: hunter
    spec:
      volumes:
      - name: kube-services-path
        hostPath:
          path: /etc/systemd/system/
      - name: kube-proxy-config-path
        hostPath:
          path: /var/lib/kube-proxy/
      - name: kubernetes-home-path
        hostPath:
          path: /home/kubernetes/
      containers:
      - name: file-permission
        image: debian
        command: ["/bin/sh", "-c"]
        args:
        - |-
          # CIS Controls. Worker Node Configuration Files. Level 1

          echo 
          echo "\033[33m   _____ _____  _____   _          _                 _               _    "
          echo "  / ____|_   _|/ ____| | |        | |               | |             | |   "
          echo " | |      | | | (___   | | ___   _| |__   ___    ___| |__   ___  ___| | __"
          echo " | |      | |  \___ \  | |/ / | | | '_ \ / _ \  / __| '_ \ / _ \/ __| |/ /"
          echo " | |____ _| |_ ____) | |   <| |_| | |_) |  __/ | (__| | | |  __/ (__|   < "
          echo "  \_____|_____|_____/  |_|\_\\__,_|_.__/ \___|   \___|_| |_|\___|\___|_|\_\ \033[m"
          echo
                                                                          

          echo 
          echo "\033[36m ##################################################################################################################################"
          echo " # Permissions in kube*.service files                                                                                             #"
          echo " ##################################################################################################################################\033[m"

          stat --printf='%a\t%U\t%G\t%n\n' $KUBE_SERVICES_PATH/kube*.service | \
            awk '{if ($1 == 644) print "  | Correct access in $KUBE_SERVICES_PATH/kube*.service is << 644 >> \t\t\t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct access in $KUBE_SERVICES_PATH/kube*.service is << 644 >> \t\t\t\t\t| Score | " "\033[31mFAIL\033[m"}'

          stat --printf='%a\t%U\t%G\t%n\n' $KUBE_SERVICES_PATH/kube*.service | \
            awk '{if (($2 == "root") && ($3 == "root")) print "  | Correct ownership in $KUBE_SERVICES_PATH/kube*.service files is << root:root >> \t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct ownership in $KUBE_SERVICES_PATH/kube*.service files is << root:root >> \t\t\t| Score | " "\033[31mFAIL\033[m"}'
          
          echo
          echo "\033[36m ##################################################################################################################################"
          echo " # Permissions in kubeconfig file                                                                                                 #"
          echo " ##################################################################################################################################\033[m"
          
          stat --printf='%a\t%U\t%G\t%n\n' $KUBE_PROXY_CONFIG_PATH/kubeconfig | \
            awk '{if ($1 == 644) print "  | Correct access in $KUBE_PROXY_CONFIG_PATH/kubeconfig is << 644 >> \t\t\t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct access in $KUBE_SERVICES_PATH/kube*.service is << 644 >> \t\t\t\t\t| Score | " "\033[31mFAIL\033[m"}'

          stat --printf='%a\t%U\t%G\t%n\n' $KUBE_PROXY_CONFIG_PATH/kubeconfig | \
            awk '{if (($2 == "root") && ($3 == "root")) print "  | Correct ownership in $KUBE_PROXY_CONFIG_PATH/kubeconfig files is << root:root >> \t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct ownership in $KUBE_PROXY_CONFIG_PATH/kubeconfig files is << root:root >> \t\t\t| Score | " "\033[31mFAIL\033[m"}'
          
          echo
          echo "\033[36m ##################################################################################################################################"
          echo " # Permissions in kubelet-config.yaml file                                                                                        #"
          echo " ##################################################################################################################################\033[m"
          
          stat --printf='%a\t%U\t%G\t%n\n' $KUBERNETES_HOME_PATH/kubelet-config.yaml | \
            awk '{if ($1 == 600) print "  | Correct access in $KUBERNETES_HOME_PATH/kubelet-config.yaml is << 600 >> \t\t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct access in $KUBERNETES_HOME_PATH/kubelet-config.yaml is << 600 >> \t\t\t\t| Score | " "\033[31mFAIL\033[m"}'
          
          stat --printf='%a\t%U\t%G\t%n\n' $KUBERNETES_HOME_PATH/kubelet-config.yaml | \
            awk '{if (($2 == "root") && ($3 == "root")) print "  | Correct ownership in $KUBERNETES_HOME_PATH/kubelet-config.yaml files is << root:root >> \t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct ownership in $KUBERNETES_HOME_PATH/kubelet-config.yaml files is << root:root >> \t\t| Score | " "\033[31mFAIL\033[m"}'
          
          echo
          echo "\033[36m ##################################################################################################################################"
          echo " # Settings in kubelet-config.yaml file                                                                                           #"
          echo " ##################################################################################################################################\033[m"
          
          awk 'NR==4 {if ($2 == "false") \
            print "  | Correct setting for authentication anonymous enabled must be << false >> \t\t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct setting for authentication anonymous enabled must be << false >> \t\t\t\t| Score | " "\033[31mFAIL\033[m"}' \
            $KUBERNETES_HOME_PATH/kubelet-config.yaml

          awk 'NR==10 {if ($2 == "Webhook") \
            print "  | Correct setting for authorization mode must be << Webhook >> \t\t\t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct setting for authorization mode must be << Webhook >> \t\t\t\t\t| Score | " "\033[31mFAIL\033[m"}' \
            $KUBERNETES_HOME_PATH/kubelet-config.yaml

          awk 'NR==8 {if ($2 == "/etc/srv/kubernetes/pki/ca-certificates.crt") \
            print "  | Correct setting for clientCAFile must be << /etc/srv/kubernetes/pki/ca-certificates.crt >> \t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct setting for clientCAFile must be << /etc/srv/kubernetes/pki/ca-certificates.crt >> \t\t| Score | " "\033[31mFAIL\033[m"}' \
            $KUBERNETES_HOME_PATH/kubelet-config.yaml

          awk 'NR==30 {if ($2 == 0) \
            print "  | Correct setting for readOnlyPort must be << 0 >> \t\t\t\t\t\t\t| Score | " "\033[32mPASS\033[m"; else \
            print "  | Correct setting for readOnlyPort must be << 0 >> \t\t\t\t\t\t\t| Score | " "\033[31mFAIL\033[m"}' \
            $KUBERNETES_HOME_PATH/kubelet-config.yaml
          
          var=$(grep streamingConnectionIdleTimeout /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
            echo "$var" | \
              if [ $(wc -L) -eq 0 ]; then
                echo "  | Correct setting for streamingConnectionIdleTimeout must be value other than << 0 >> \t\t| Score | \033[31mMISSING PARAMETER\033[m";
              elif [ "$var" != "streamingConnectionIdleTimeout: 5m" ]; then
                echo "  | Correct setting for streamingConnectionIdleTimeout must be value other than << 0 >> \t\t| Score | \033[31mFAIL\033[m";
              else
                echo "  | Correct setting for streamingConnectionIdleTimeout must be value other than << 0 >> \t\t| Score | \033[32mPASS\033[m";
              fi
          unset var

          var=$(grep protectKernelDefaults /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
            echo "$var" | \
              if [ $(wc -L) -eq 0 ]; then
                echo "  | Correct setting for protectKernelDefaults must be << true >> \t\t\t\t\t| Score | \033[31mMISSING PARAMETER\033[m";
              elif [ "$var" != "protectKernelDefaults: true" ]; then
                echo "  | Correct setting for protectKernelDefaults must be << true >> \t\t\t\t\t| Score | \033[31mFAIL\033[m";
              else
                echo "  | Correct setting for protectKernelDefaults must be << true >> \t\t\t\t\t| Score | \033[32mPASS\033[m";
              fi
          unset var

          var=$(grep makeIPTablesUtilChains /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
            echo "$var" | \
              if [ $(wc -L) -eq 0 ]; then
                echo "  | Correct setting for makeIPTablesUtilChains must be << true >> \t\t\t\t\t| Score | \033[31mMISSING PARAMETER\033[m";
              elif [ "$var" != "makeIPTablesUtilChains: true" ]; then
                echo "  | Correct setting for makeIPTablesUtilChains must be << true >> \t\t\t\t\t| Score | \033[31mFAIL\033[m";
              else
                echo "  | Correct setting for makeIPTablesUtilChains must be << true >> \t\t\t\t\t| Score | \033[32mPASS\033[m";
              fi
          unset var

          var=$(grep hostname /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
          var1=$(grep hostname /etc/systemd/system/kubelet.service | awk '{print $0}')
              if [ $(echo "$var" | wc -L) -ne 0 ] || [ $(echo "$var1" | wc -L) -ne 0 ]; then
                echo "  | Correct setting for hostnameOverride must be << not set >> \t\t\t\t\t\t| Score | \033[31mFAIL\033[m";
              else
                echo "  | Correct setting for hostnameOverride must be << not set >> \t\t\t\t\t\t| Score | \033[32mPASS\033[m";
              fi
          unset var
          unset var1

          var=$(grep eventRecordQPS /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
            echo "$var" | \
              if [ $(wc -L) -eq 0 ]; then
                echo "  | Correct setting for eventRecordQPS must be << value > 0 >> \t\t\t\t\t\t| Score | \033[31mMISSING PARAMETER\033[m";
              elif [ "$var" != "eventRecordQPS: 5" ]; then
                echo "  | Correct setting for eventRecordQPS must be << value > 0 >> \t\t\t\t\t\t| Score | \033[31mFAIL\033[m";
              else
                echo "  | Correct setting for eventRecordQPS must be << value > 0 >> \t\t\t\t\t\t| Score | \033[32mPASS\033[m";
              fi
          unset var
        env:
          - name: KUBE_SERVICES_PATH
            value: "/etc/systemd/system"
          - name: KUBE_PROXY_CONFIG_PATH
            value: "/var/lib/kube-proxy"
          - name: KUBERNETES_HOME_PATH
            value: "/home/kubernetes"
        volumeMounts:
        - name: kube-services-path
          mountPath: /etc/systemd/system/
        - name: kube-proxy-config-path
          mountPath: /var/lib/kube-proxy/
        - name: kubernetes-home-path
          mountPath: /home/kubernetes/