apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8s-hardener
  labels:
    purpose: execute-command
spec:
  selector:
    matchLabels:
      app: k8s-hardener
  template:
    metadata:
      labels:
        app: k8s-hardener
    spec:
      volumes:
      - name: kube-services-path
        hostPath:
          path: /etc/systemd/system/
      - name: kube-proxy-config-path
        hostPath:
          path: /var/lib/kube-proxy/
      - name: kubernetes-home-path
        hostPath:
          path: /home/kubernetes/
      containers:
      - name: file-permission
        image: debian
        command: ["sh", "-c"]
        args:
        - |-
          # CIS Controls. Worker Node Configuration Files. Level 1


            # Change file permissions to 644, Uid:root and Gid:root in kube service files

              for i in $(ls -- $KUBE_SERVICES_PATH/kube*.service | wc -l)
              do
                stat --printf='%a\t%n\n' $KUBE_SERVICES_PATH/kube*.service | \
                  awk '{if ($1 != 644) print $2}' | \
                  xargs -I {} chmod 644 $2 {}
                stat --printf='%U\t%G\t%n\n' $KUBE_SERVICES_PATH/kube*.service | \
                  awk '{if (($1 != "root") || ($2 != "root")) print $3}' | \
                  xargs -I {} chown root:root $3 {}
              done

            # Change file permissions to 644, Uid:root and Gid:root in kube-proxy config file

              stat --printf='%a\t%n\n' $KUBE_PROXY_CONFIG_PATH/kubeconfig | \
                awk '{if ($1 != 644) print $2}' | \
                xargs -I {} chmod 644 $2 {}
              stat --printf='%U\t%G\t%n\n' $KUBE_PROXY_CONFIG_PATH/kubeconfig | \
                awk '{if (($1 != "root") || ($2 != "root")) print $3}' | \
                xargs -I {} chown root:root $3 {}

            # Change file permissions to 600, Uid:root and Gid:root in kubelet config file

              stat --printf='%a\t%n\n' $KUBERNETES_HOME_PATH/kubelet-config.yaml | \
                awk '{if ($1 != 600) print $2}' | \
                xargs -I {} chmod 600 $2 {}
              stat --printf='%U\t%G\t%n\n' $KUBERNETES_HOME_PATH/kubelet-config.yaml | \
                awk '{if (($1 != "root") || ($2 != "root")) print $3}' | \
                xargs -I {} chown root:root $3 {}

            # Settings in kubelet-config.yaml file

              # autentication: anonymous: to false
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==4 {if ($2 == "true") print $2}' | \
                xargs -I -exec sed -i.bak '4 s/enabled: true/enabled: false/' '/home/kubernetes/kubelet-config.yaml'
              
              # authorization: mode: to Webhook
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==10 {if ($2 != "Webhook") print $2}' | \
                xargs -I -exec sed -i.bak '10 s/mode.*/mode: Webhook/' '/home/kubernetes/kubelet-config.yaml'
              
              # authentication: x509: clientCAFile: to correct path
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==8 {if ($2 != "/etc/srv/kubernetes/pki/ca-certificates.crt") print $2}' | \
                xargs -I -exec sed -i.bak '8 s/clientCAFile.*/clientCAFile: \/etc\/srv\/kubernetes\/pki\/ca-certificates.crt/' '/home/kubernetes/kubelet-config.yaml'
              
              # readOnlyPort: to 0
              cat /home/kubernetes/kubelet-config.yaml | \
                awk 'NR==30 {if ($2 != 0) print $2}' | \
                xargs -I -exec sed -i.bak '30 s/readOnlyPort.*/readOnlyPort: 0/' '/home/kubernetes/kubelet-config.yaml'
              
              # streamingConnectionIdleTimeout: to a value other than 0
              var=$(grep streamingConnectionIdleTimeout /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak '$a streamingConnectionIdleTimeout: 1' '/home/kubernetes/kubelet-config.yaml';
                elif [ "$var" != "streamingConnectionIdleTimeout: 1" ]; then
                  sed -i.bak 's/streamingConnectionIdleTimeout.*/streamingConnectionIdleTimeout: 1/' '/home/kubernetes/kubelet-config.yaml';
                fi
              unset var

              # protectKernelDefaults: to true
              var=$(grep protectKernelDefaults /home/kubernetes/kubelet-config.yaml | awk '{print $0}')
              echo "$var" | \
                if [ $(wc -L) -eq 0 ]; then
                  sed -i.bak '$a protectKernelDefaults: true' '/home/kubernetes/kubelet-config.yaml';
                elif [ "$var" != "protectKernelDefaults: true" ]; then
                  sed -i.bak 's/protectKernelDefaults.*/protectKernelDefaults: true/' '/home/kubernetes/kubelet-config.yaml';
                fi
              unset var
        env:
          - name: KUBE_SERVICES_PATH
            value: "/etc/systemd/system"
          - name: KUBE_PROXY_CONFIG_PATH
            value: "/var/lib/kube-proxy"
          - name: KUBERNETES_HOME_PATH
            value: "/home/kubernetes"
        volumeMounts:
        - name: kube-services-path
          mountPath: /etc/systemd/system/
        - name: kube-proxy-config-path
          mountPath: /var/lib/kube-proxy/
        - name: kubernetes-home-path
          mountPath: /home/kubernetes/